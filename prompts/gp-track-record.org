Hi GPT! I'm going to give you a prompt and some code files in the
following form:

* FILE: /path/to/file

#+BEGIN_SRC
file contents
#+END_SRC

Please provide your results in the same format updated. Please provide
full file updates. When returning a response, if the file is not
updated please omit it from the output. Please do not remove existing
code or existing doc strings unless they are no longer needed. Please
make the minimal set of changes necessary to get the required
functionality you are aiming for. Please return all code in a single
block so I can copy it.


Prompt:

Hi GPT! I'd like to start making a segment of the app for GP Track
Record analysis. Can you make me a component on both the frontend and
backend that does the following:

frontend:

The user has a button to generate a GP track record. There are
controls for:

- GP Name
- number of funds
  - between 1 and 15, default to 5
- number of deals per fund
  - default to 15
- a button to generate fund data

When the user clicks the button to generate fund data, please create
fake data using the backend. Return it to the frontend and display
each table in the UI

In the backend:
- Please create a Fund SQLModel model with the following fields:
  - Fund Name (should be Fund 1, 2, ... for the number of funds
    specified by the user)
  - GP Name (also sent from the frontend)
  - Fund Vintage Year
    - Please generate this such that the GP releases a new fund each
      year. So if a user selects 15 funds, Fund 1 should be 15 years
      ago for a vintage year
  - Net IRR
    - A number between 0.0 and 1.5, skewed towards ~.2
  - Net DPI
    - A number between 0 and 5x, averaging 1.0x returns. Please use a
      log normal distribution for this. For generating numbers, please
      use numpy and probability distributions
  - Net TVPI
    - similar to DPI
  - Stage
    - Either Buyout or Venture
  - Geo
    - Either North America, Global, or Europe

For each fund, please generate data with the above specification. For
each fund and for the number of deals within each fund (n), please
generate a deal row that links to the given fund. This data is
hierarchical in that sense.

For each Deal within a fund, please make a Deal SQLModel model with
the following fields:
  - Fund Name (should be connected to a fund like above)
  - GP Name (should be given by the user as well)
  - Company Name
    - Please generate a random word here
  - Stage
    - Either Buyout or Venture
    - Please connect this to the fund that is generating the given deals
  - Geo
    - Either North America, Global, or Europe
    - Please connect this to the fund that is generating the given deals
  - total value
    - sample from a log normal distribution centered on 100m
  - total cost
    - sample from a log normal distribution centered on 100m
  - realized value
    - sample from standard uniform distribution and multiply that by
      the total value
  - realized cost
    - the same as above, but multiply that by the total cost
  - tv/tc
    - total value / total cost. Just do the calculation with what you
      generated above
  - realized
    - true or false if the deal has been exited. In this case, please
      generate from a bernoulli / binomial distribution with roughly a 25% chance
      to being true

After generating the deals data, please make a third table Cash flows
for each fund. Please make a CashFlow SQLModel with the following
information:

- Date
- Amount (in millions)
- Type

- Please take the funds vintage year and do the following:
  - Given the time distance between the beginning of the funds
    vintage year and today's date, please break it into 2 segments:
    - For about min(30%, 2) of the dates, make all the cash flows
      negative and set the type to Call

      Here is an approach to model calls:

      Private equity cash flow forecasting often starts with
      historical cash flow curves—basically, the “average” pattern of
      capital calls and distributions observed in funds of a similar
      vintage. These curves capture the typical lifecycle of a private
      equity fund, including the early “J-curve” period where capital
      is drawn down and distributions lag behind. However, while these
      curves provide a useful baseline, they can’t capture all the
      variability seen in real-world data. That’s where statistical
      distributions like the Weibull or Burr come in.

Deterministic Cash Flow Curves

    Baseline Patterns: Historical cash flow curves are generated by
    aggregating data from previous funds. For example, you might
    observe that on average, 50% of the total capital is called in the
    first two years, 30% in the next three, and the remaining 20% over
    the following years.  Use in Planning: These deterministic curves
    help set expectations for liquidity planning, portfolio
    monitoring, and cash flow forecasting by giving you a “typical”
    timeline for when calls and distributions occur.

Incorporating Statistical Distributions

Because no two funds follow the exact same pattern, models refine
these averages using statistical distributions: Weibull Distribution

    Flexibility: The Weibull distribution is widely used to model
    time-to-event data. Its shape parameter can capture increasing or
    decreasing hazard rates, which is useful if capital calls tend to
    occur rapidly at the beginning and then slow down.
    Parameterization: By calibrating the Weibull parameters (shape and
    scale) to historical call timing data, you can simulate a range of
    possible call dates rather than a fixed schedule. This reflects
    the real-world variability in when funds actually call capital.

Burr Distribution

    Heavy-Tail Behavior: The Burr distribution is particularly useful
    when the data exhibit heavy tails—that is, there are more extreme
    outcomes than a normal distribution would predict. In private
    equity, this might be relevant for funds that occasionally have
    very delayed or unusually early calls/distributions.  Complex
    Patterns: With its three parameters, the Burr distribution can fit
    a wide range of shapes, making it a good choice when the
    variability in cash flow timing is complex or when you want to
    capture the risk of outlier events.

Integration into Forecasting Models

    Deterministic Foundation: Start with the historical average curve
    to set a baseline expectation for the timing of calls and
    distributions.  Stochastic Refinement: Use a Weibull or Burr
    distribution to introduce randomness around these
    averages. Instead of assuming that a 10% call happens exactly in
    year 1.5 for every fund, you simulate many scenarios where that
    10% might be called earlier or later based on the fitted
    distribution.

    - For the rest of the cash flows, please set the value to positive
      and set the type to Distribution

      You can make a distributions follow a lognormal sampling scaled
      in the millions

For each fund, please return a single CashFlow table. Please make new
files and endpoints as necessary. Please separate out the cash flow
generating functions into their own functions and call them as a part of
an integrated cashflow object.

Relevant Code:

* FILE: /home/neptune/Documents/tankakern/backend/main.py
#+BEGIN_SRC python
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles  # <-- Added
from datetime import datetime, timedelta
import random
from routes.data_extraction import router as data_extraction_router
from routes.performance import router as performance_router
from routes.extractive_qa import router as extractive_qa_router
from routes.extract_tables import router as extract_tables_router
from routes.auth import router as auth_router
from routes.user_management import router as user_management_router

app = FastAPI()

# Mount the uploads directory to serve static files
app.mount("/uploads", StaticFiles(directory="uploads"), name="uploads")  # <-- Added

app.include_router(data_extraction_router, prefix="/data-extraction")
app.include_router(performance_router, prefix="/performance")
app.include_router(extractive_qa_router, prefix="/data-extraction/process")
app.include_router(extract_tables_router, prefix="/data-extraction/tables")
app.include_router(auth_router, prefix="/auth")
app.include_router(user_management_router, prefix="/user-management")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
#+END_SRC

* FILE: /home/neptune/Documents/tankakern/backend/models/user.py
#+BEGIN_SRC python
from sqlmodel import SQLModel, Field
from typing import Optional
from datetime import datetime

class User(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    username: str = Field(index=True, nullable=False)
    displayname: Optional[str] = Field(default=None, nullable=True)
    email: str = Field(index=True, nullable=False, unique=True)
    hashed_password: str = Field(nullable=False)
    profile_picture: Optional[str] = Field(default=None, nullable=True)
    created_at: datetime = Field(default_factory=datetime.utcnow, nullable=False)
#+END_SRC

* FILE: /home/neptune/Documents/tankakern/backend/routes/performance.py
#+BEGIN_SRC python
from fastapi import APIRouter, Query
from datetime import datetime, timedelta
import numpy as np

router = APIRouter(tags=["Performance"])

@router.get("/timeseries")
def get_timeseries(steps: int = 100, starting_value: int = 0, num_processes: int = Query(1, ge=1, le=10)):
    """
    Return fake time series data as a list of time series, each with timestamp-value pairs.
    """
    now = datetime.utcnow()
    series_labels = [f"Process {i}" for i in range(1, num_processes + 1)]
    data = []
    for label in series_labels:
        series_data = []
        # Generate data points using Geometric Brownian Motion; simulate with baseline S0_sim=1, then shift to starting_value
        N = steps
        dt = 1
        S0_sim = 1
        mu = 0.05
        sigma = 0.2
        rand = np.random.normal(0, 1, size=N)
        prices = [S0_sim]
        for i in range(1, N):
            new_price = prices[-1] * np.exp((mu - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * rand[i])
            prices.append(new_price)
        offset = starting_value - prices[0]
        prices = [p + offset for p in prices]
        timestamps = [(now - timedelta(minutes=5 * (N - 1 - i))).isoformat() + "Z" for i in range(N)]
        for i in range(N):
            series_data.append({"timestamp": timestamps[i], "value": round(prices[i], 2)})
        data.append({"name": label, "data": series_data})
    return {"data": data}
#+END_SRC

* FILE: /home/neptune/Documents/tankakern/tankakern/src/app/layout.tsx
#+BEGIN_SRC typescript
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Sidebar from "../components/Sidebar";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "PE Lab",
  description: "Private Equity Lab",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" data-theme="night">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {/* Main wrapper using DaisyUI-friendly classes */}
        <div className="flex min-h-screen bg-base-200">
          <Sidebar />
          <main className="flex-grow p-4">{children}</main>
        </div>
      </body>
    </html>
  );
}
#+END_SRC

* FILE: /home/neptune/Documents/tankakern/tankakern/src/app/page.tsx
#+BEGIN_SRC typescript
"use client";
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";

export default function Home() {
  const router = useRouter();
  const [user, setUser] = useState(null);

  useEffect(() => {
    const storedUser = localStorage.getItem("user");
    if (!storedUser || storedUser === "undefined") {
      router.replace("/login");
    } else {
      if (storedUser.trim()[0] !== '{') {
        console.error("Invalid user data in localStorage", storedUser);
        localStorage.removeItem("user");
        router.replace("/login");
      } else {
        try {
          setUser(JSON.parse(storedUser));
        } catch (error) {
          console.error("Error parsing user from localStorage", error);
          localStorage.removeItem("user");
          router.replace("/login");
        }
      }
    }
  }, [router]);

  return (
    <>
      <div className="hero min-h-screen bg-base-200">
        <div className="hero-content text-center">
          <div className="max-w-md">
            <h1 className="text-5xl font-bold">PE Lab</h1>
            <p className="py-6">
              A Private Equity exploration platform. Under construction!
            </p>
            <div className="flex justify-center gap-4">
              <a className="btn btn-primary" href="#">
                Launch
              </a>
              <a className="btn btn-secondary" href="#">
                Learn More
              </a>
            </div>
          </div>
        </div>
      </div>
      {user && (
        <div className="fixed bottom-0 left-0 p-4">
          <p className="text-sm">
            Logged in as: <span className="font-bold">{user.username}</span>
          </p>
        </div>
      )}
    </>
  );
}
#+END_SRC

* FILE: /home/neptune/Documents/tankakern/tankakern/src/app/performance/page.tsx
#+BEGIN_SRC typescript
"use client";
import { useState, useEffect } from "react";
import dynamic from "next/dynamic";
const Plot = dynamic(() => import("react-plotly.js"), { ssr: false });
import { daisyNightTheme } from "../../theme/plotlyTheme";

export default function PerformancePage() {
  const [data, setData] = useState<Array<{ name: string; data: Array<{ timestamp: string; value: number }> }>>([]);
  const [loading, setLoading] = useState(true);
  const [steps, setSteps] = useState<number>(100);
  const [startingValue, setStartingValue] = useState<number>(0);
  const [numProcesses, setNumProcesses] = useState<number>(1);

  const fetchData = () => {
    setLoading(true);
    fetch(`http://localhost:8000/performance/timeseries?steps=${steps}&starting_value=${startingValue}&num_processes=${numProcesses}`)
      .then((response) => response.json())
      .then((result) => {
        if (result.data) {
          setData(result.data);
        }
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching timeseries data:", error);
        setLoading(false);
      });
  };

  useEffect(() => {
    fetchData();
  }, []);

  useEffect(() => {
    fetch("http://localhost:8000/performance/timeseries")
      .then((response) => response.json())
      .then((result) => {
        if (result.data) {
          setData(result.data);
        }
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching timeseries data:", error);
        setLoading(false);
      });
  }, []);

  const layout = {
    ...daisyNightTheme.layout,
    title: "Time Series Data",
    xaxis: { ...daisyNightTheme.layout.xaxis, title: "Time" },
    yaxis: { ...daisyNightTheme.layout.yaxis, title: "Value" },
    autosize: true,
  };

  const plotData = data.map((series, index) => ({
      x: series.data.map((item) => item.timestamp),
      y: series.data.map((item) => item.value),
      type: "scatter",
      mode: "lines+markers",
      name: series.name,
      marker: { color: daisyNightTheme.layout.colorway[index % daisyNightTheme.layout.colorway.length] },
  }));

  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold mb-4">Performance</h1>
      <div className="flex flex-col md:flex-row items-center mb-4 gap-4">
        <div className="flex flex-col">
          <div className="flex items-center gap-1">
            <label className="font-bold">Steps</label>
            <div className="tooltip tooltip-top" data-tip="Total number of steps to simulate">
              <span className="cursor-pointer text-secondary">?</span>
            </div>
          </div>
          <input
            type="number"
            value={steps}
            onChange={(e) => setSteps(Number(e.target.value))}
            className="input input-bordered w-32"
            placeholder="Steps"
          />
        </div>
        <div className="flex flex-col">
          <div className="flex items-center gap-1">
            <label className="font-bold">Start</label>
            <div className="tooltip tooltip-top" data-tip="Initial value for the simulation">
              <span className="cursor-pointer text-secondary">?</span>
            </div>
          </div>
          <input
            type="number"
            value={startingValue}
            onChange={(e) => setStartingValue(Number(e.target.value))}
            className="input input-bordered w-32"
            placeholder="Starting Value"
          />
        </div>
        <div className="flex flex-col">
          <div className="flex items-center gap-1">
            <label className="font-bold">Proc</label>
            <div className="tooltip tooltip-top" data-tip="Number of processes to use">
              <span className="cursor-pointer text-secondary">?</span>
            </div>
          </div>
          <input
            type="number"
            value={numProcesses}
            onChange={(e) => setNumProcesses(Number(e.target.value))}
            className="input input-bordered w-32"
            placeholder="Processes"
            min={1}
            max={10}
          />
        </div>
        <button className="btn btn-primary" onClick={fetchData}>
          Refresh Plot
        </button>
      </div>
      {loading ? (
        <p>Loading data...</p>
      ) : (
        <Plot
          data={plotData}
          layout={layout}
          style={{ width: "100%", height: "100%" }}
          useResizeHandler={true}
        />
      )}
    </div>
  );
}
#+END_SRC

* FILE: /home/neptune/Documents/tankakern/tankakern/src/app/track-record/page.tsx
#+BEGIN_SRC typescript
export default function TrackRecordPage() {
  return (
    <div className="card w-full bg-base-100 shadow-xl">
      <div className="card-body">
        <h1 className="card-title">Track Record</h1>
        <p>This is a placeholder page for Track Record.</p>
      </div>
    </div>
  );
}
#+END_SRC

* FILE: /home/neptune/Documents/tankakern/tankakern/src/components/ResultCard.tsx
#+BEGIN_SRC typescript
"use client";
import React from "react";
import ReactMarkdown from "react-markdown";
import rehypeRaw from "rehype-raw";

const renderHighlightedContext = (
  context: string,
  offset: { start: number; end: number }
) => {
  const windowSize = 1500;

  if (context.length <= windowSize) {
    // If context is shorter than the window, no need to truncate.
    const before = context.slice(0, offset.start);
    const highlight = context.slice(offset.start, offset.end);
    const after = context.slice(offset.end);
    const combined = `${before}<mark class="bg-yellow-300 px-1">${highlight}</mark>${after}`;
    return (
      <div className="whitespace-pre-wrap">
        <ReactMarkdown rehypePlugins={[rehypeRaw]}>
          {combined}
        </ReactMarkdown>
      </div>
    );
  }

  // Calculate the center of the highlighted region.
  let highlightCenter = Math.floor((offset.start + offset.end) / 2);
  let excerptStart = highlightCenter - Math.floor(windowSize / 2);
  if (excerptStart < 0) excerptStart = 0;
  let excerptEnd = excerptStart + windowSize;
  if (excerptEnd > context.length) {
    excerptEnd = context.length;
    excerptStart = Math.max(0, context.length - windowSize);
  }
  const adjustedOffset = {
    start: offset.start - excerptStart,
    end: offset.end - excerptStart,
  };
  const excerpt = context.slice(excerptStart, excerptEnd);
  const before = excerpt.slice(0, adjustedOffset.start);
  const highlight = excerpt.slice(adjustedOffset.start, adjustedOffset.end);
  const after = excerpt.slice(adjustedOffset.end);
  const combined = `${before}<mark class="bg-yellow-300 px-1">${highlight}</mark>${after}`;
  return (
    <div className="whitespace-pre-wrap">
      <ReactMarkdown rehypePlugins={[rehypeRaw]}>
        {combined}
      </ReactMarkdown>
    </div>
  );
};

interface ResultCardProps {
  answer: {
    score: number;
    data: string | null;
    document_offset: { start: number; end: number } | null;
    context?: string;
  };
}

export default function ResultCard({ answer }: ResultCardProps) {
  return (
    <div className="card bg-base-200 shadow-xl mb-4">
      <div className="card-body">
        <h2 className="card-title">Answer:</h2>
        <div className="markdown-answer">
          <ReactMarkdown rehypePlugins={[rehypeRaw]}>
            {answer.data || "No answer provided"}
          </ReactMarkdown>
        </div>
        <p>Score: {answer.score}</p>
        {answer.document_offset && (
          <p>
            Document Offset: {answer.document_offset.start} - {answer.document_offset.end}
          </p>
        )}
        {answer.context && answer.document_offset ? (
          <div className="mt-2">
            <strong>Context:</strong>
            {renderHighlightedContext(answer.context, answer.document_offset)}
          </div>
        ) : answer.context ? (
          <p className="mt-2">
            <strong>Context:</strong> {answer.context}
          </p>
        ) : null}
      </div>
    </div>
  );
}
#+END_SRC

* FILE: /home/neptune/Documents/tankakern/tankakern/src/components/Sidebar.tsx
#+BEGIN_SRC typescript
"use client";
import { useState, useEffect } from "react";
import Link from "next/link";

export default function Sidebar() {
  const [user, setUser] = useState<any>(null);

  useEffect(() => {
    const updateUser = async () => {
      const storedUser = localStorage.getItem("user");
      if (!storedUser || storedUser === "undefined" || storedUser.trim() === "" || storedUser.trim()[0] !== "{") {
        setUser(null);
      } else {
        try {
          const parsedUser = JSON.parse(storedUser);
          const res = await fetch(`http://localhost:8000/user-management/${parsedUser.id}`);
          if (res.ok) {
            const data = await res.json();
            setUser(data);
          } else {
            // Fallback if the user can't be fetched again
            setUser(parsedUser);
          }
        } catch (error) {
          console.error("Failed to fetch user from backend", error);
          setUser(null);
        }
      }
    };
    updateUser();
    const interval = setInterval(updateUser, 1000);
    return () => clearInterval(interval);
  }, []);

  return (
    <aside className="menu w-64 p-4 bg-base-100 text-base-content flex flex-col h-screen">
      <div className="mb-4">
        <Link href="/">
          <button className="btn btn-ghost text-pink-500 hover:text-pink-600 flex items-center gap-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="2"
              stroke="currentColor"
              className="w-6 h-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M3 9.75L12 3l9 6.75V21a1.5 1.5 0 01-1.5 1.5H4.5A1.5 1.5 0 013 21V9.75z"
              />
            </svg>
            Home
          </button>
        </Link>
      </div>
      <div className="mt-4">
        <span className="block text-sm font-bold text-gray-700 mb-2">Data Extraction</span>
        <ul className="menu bg-base-100 p-2 rounded-box">
          <li>
            <Link href="/extractive-qa" className="flex items-center gap-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth="2"
                stroke="currentColor"
                className="w-5 h-5"
              >
                <path strokeLinecap="round" strokeLinejoin="round" d="M12 8v4l3 3" />
              </svg>
              Extractive QA
            </Link>
          </li>
          <li>
            <Link href="/table-extractor" className="flex items-center gap-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth="2"
                stroke="currentColor"
                className="w-5 h-5"
              >
                <path strokeLinecap="round" strokeLinejoin="round" d="M3 10h18" />
              </svg>
              Table Extractor
            </Link>
          </li>
        </ul>
      </div>
      <ul className="menu bg-base-100 p-2 rounded-box mt-4">
        <li>
          <Link href="/performance" className="flex items-center gap-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="2"
              stroke="currentColor"
              className="w-5 h-5"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M3 10h4v10H3zM9 6h4v14H9zM15 14h4v6h-4z"
              />
            </svg>
            Performance
          </Link>
        </li>
        <li>
          <Link href="/track-record" className="flex items-center gap-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="2"
              stroke="currentColor"
              className="w-5 h-5"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M12 8v4l3 3"
              />
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M12 3a9 9 0 110 18 9 9 0 010-18z"
              />
            </svg>
            Track Record
          </Link>
        </li>
        <li>
          <Link href="/relationships" className="flex items-center gap-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="2"
              stroke="currentColor"
              className="w-5 h-5"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M17 20h5v-2a4 4 0 00-4-4H6a4 4 0 00-4 4v2h5M12 12a4 4 0 110-8 4 4 0 010 8z"
              />
            </svg>
            Relationships
          </Link>
        </li>
      </ul>
      {user && (
        <div className="flex justify-between items-center mt-auto p-2 border-t border-base-300">
          <div className="avatar">
            <div className="w-12 rounded">
              <img
                src={
                  user.profile_picture
                    ? user.profile_picture.startsWith("http")
                      ? user.profile_picture
                      : `http://localhost:8000/${user.profile_picture}`
                    : "/default-avatar.png"
                }
                alt="Profile picture"
              />
            </div>
          </div>
          <div>
            <Link href="/user-management" className="text-sm font-bold text-blue-500 underline">
              {user.displayname || user.username}
            </Link>
          </div>
          <div className="tooltip tooltip-top" data-tip="Logout">
            <button
              onClick={() => {
                localStorage.removeItem("user");
                window.location.href = "/login";
              }}
              className="btn btn-ghost"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M7 2h10a1 1 0 011 1v18a1 1 0 01-1 1H7a1 1 0 01-1-1V3a1 1 0 011-1zm3 12a2 2 0 104 0 2 2 0 00-4 0z" />
              </svg>
            </button>
          </div>
        </div>
      )}
      {!user && (
        <div className="mt-4 text-center">
          <p className="text-sm">
            Don't have an account? <Link href="/register" className="text-blue-500 underline">Register here</Link>.
          </p>
        </div>
      )}
    </aside>
  );
}
#+END_SRC

* FILE: /home/neptune/Documents/tankakern/tankakern/src/components/TableViewer.tsx
#+BEGIN_SRC typescript
"use client";
import React from "react";
import ReactMarkdown from "react-markdown";
import rehypeRaw from "rehype-raw";
import remarkGfm from "remark-gfm";

interface TableViewerProps {
  markdown: string;
}

export default function TableViewer({ markdown }: TableViewerProps) {
  return (
    <div className="markdown-table overflow-auto p-4">
      <ReactMarkdown
        rehypePlugins={[rehypeRaw]}
        remarkPlugins={[remarkGfm]}
        components={{
          table: ({node, ...props}) => (
            <table className="table-auto w-full border-collapse border border-gray-300" {...props} />
          ),
          th: ({node, children, ...props}) => (
            <th className="border border-gray-300 px-4 py-2 bg-gray-100" {...props}>
              {!children || (Array.isArray(children) && children.join("").trim() === "") ? "\u00A0" : children}
            </th>
          ),
          td: ({node, children, ...props}) => (
            <td className="border border-gray-300 px-4 py-2" {...props}>
              {!children || (Array.isArray(children) && children.join("").trim() === "") ? "\u00A0" : children}
            </td>
          ),
        }}
      >
        {markdown}
      </ReactMarkdown>
    </div>
  );
}
#+END_SRC
